import 'dart:io';

import 'package:fast_rsa/fast_rsa.dart';
import 'package:file_picker/file_picker.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/material.dart';
import 'package:flutter_downloader/flutter_downloader.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:image_picker/image_picker.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:realtime/pages/profilotheruser.dart';

class ChatScreen extends StatefulWidget {
  final String roomId;
  final String targetUserID;
  final String nama;
  final String profilePicture;
  final String email;
  final String telepon;

  ChatScreen({
    required this.roomId,
    required this.targetUserID,
    required this.nama,
    required this.profilePicture,
    required this.email,
    required this.telepon,
  });

  @override
  _ChatScreenState createState() => _ChatScreenState();
}

class _ChatScreenState extends State<ChatScreen> {
  final DatabaseReference referenceDatabase =
      FirebaseDatabase.instance.reference().child('rooms');
  TextEditingController messageController = TextEditingController();
  final storage = FlutterSecureStorage();
  Map<String, String> decryptedMessages = {};
  Map<String, bool> _downloadingFiles = {};

  @override
  void initState() {
    super.initState();
    // FlutterDownloader.registerCallback(downloadCallback);
  }

  // void downloadCallback(String id, DownloadTaskStatus status, int progress) {
  //   print('Download status for task $id: $status, progress: $progress%');

  //   // Menangani status unduhan
  //   switch (status) {
  //     case DownloadTaskStatus.enqueued:
  //       print('Unduhan berada dalam antrean.');
  //       break;
  //     case DownloadTaskStatus.running:
  //       print('Unduhan sedang berlangsung: $progress%');
  //       break;
  //     case DownloadTaskStatus.complete:
  //       print('Unduhan selesai.');
  //       break;
  //     case DownloadTaskStatus.failed:
  //       print('Unduhan gagal.');
  //       break;
  //     default:
  //       break;
  //   }

  //   // mengupdate UI atau status unduhan di sini
  //   // Misalnya, menggunakan `setState` untuk memperbarui status UI
  // }

  IconData _getFileTypeIcon(String? fileName) {
    if (fileName == null) return Icons.insert_drive_file;
    String ext = fileName.split('.').last.toLowerCase();
    switch (ext) {
      case 'pdf':
        return Icons.picture_as_pdf;
      case 'doc':
      case 'docx':
        return Icons.description;
      case 'xls':
      case 'xlsx':
        return Icons.table_chart;
      case 'ppt':
      case 'pptx':
        return Icons.slideshow;
      case 'txt':
        return Icons.article;
      default:
        return Icons.insert_drive_file;
    }
  }

  void showLargeImage(String? imageUrl) {
    Navigator.push(context, MaterialPageRoute(builder: (_) {
      return Scaffold(
        appBar: AppBar(
          backgroundColor: Colors.black,
          iconTheme: IconThemeData(color: Colors.white),
        ),
        backgroundColor: Colors.black,
        body: Center(
          child: Hero(
            tag: widget.profilePicture,
            child: GestureDetector(
              onTap: () {
                Navigator.pop(context);
              },
              child: imageUrl != null && imageUrl.isNotEmpty
                  ? Image.network(
                      imageUrl,
                      fit: BoxFit.contain,
                    )
                  : Icon(Icons.person, size: 100, color: Colors.white),
            ),
          ),
        ),
      );
    }));
  }

  Future<void> _decryptMessage(String roomId, String messageId,
      String encryptedText, int timestamp) async {
    if (!decryptedMessages.containsKey(messageId)) {
      String? priv_key = await storage.read(key: "private_key");
      var decrypted = await RSA.decryptPKCS1v15(encryptedText, priv_key!);
      setState(() {
        decryptedMessages[messageId] = decrypted;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        iconTheme: IconThemeData(color: Colors.white),
        leading: IconButton(
          icon: Image.asset('assets/icons/back.png'),
          onPressed: () {
            Navigator.of(context).pop();
          },
        ),
        backgroundColor: Colors.blue,
        actions: <Widget>[
          PopupMenuButton(
            itemBuilder: (BuildContext context) => <PopupMenuEntry>[
              PopupMenuItem(
                child: Text('Lihat profil'),
                value: 'opt1',
              ),
              PopupMenuItem(
                child: Text('Bersihkan chat'),
                value: 'opt2',
              ),
            ],
            onSelected: (value) {
              if (value == 'opt1') {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => ProfileOtherUser(
                      userId: widget.targetUserID,
                      namaOtherUser: widget.nama,
                      PPOtherUser: widget.profilePicture,
                      otheremail: widget.email,
                      othertelepon: widget.telepon,
                    ),
                  ),
                );
              } else if (value == 'opt2') {
                bool isChecked = false;
                showDialog(
                  context: context,
                  builder: (BuildContext context) {
                    return StatefulBuilder(
                      builder: (BuildContext context, StateSetter setState) {
                        return AlertDialog(
                          title: Text('Bersihkan chat ini?'),
                          content: Column(
                            mainAxisSize: MainAxisSize.min,
                            children: <Widget>[
                              Row(
                                children: <Widget>[
                                  Transform.scale(
                                    scale: 1.5,
                                    child: Checkbox(
                                      value: isChecked,
                                      onChanged: (bool? value) {
                                        setState(() {
                                          isChecked = value ?? false;
                                        });
                                      },
                                      activeColor: Colors.blue,
                                      checkColor: Colors.white,
                                    ),
                                  ),
                                  Flexible(
                                    child: Text.rich(
                                      TextSpan(
                                        text:
                                            'Bersihkan chat juga membersihkan pada ',
                                        children: <TextSpan>[
                                          TextSpan(
                                            text: widget.nama,
                                            style: TextStyle(
                                                fontWeight: FontWeight.bold),
                                          ),
                                        ],
                                      ),
                                      softWrap: true,
                                    ),
                                  ),
                                ],
                              ),
                            ],
                          ),
                          actions: <Widget>[
                            TextButton(
                              child: Text(
                                'Batal',
                                style: TextStyle(
                                  color: Colors.blue,
                                ),
                              ),
                              onPressed: () {
                                Navigator.of(context).pop();
                              },
                            ),
                            TextButton(
                              child: Text(
                                'Bersihkan chat',
                                style: TextStyle(
                                  color: isChecked ? Colors.blue : Colors.grey,
                                ),
                              ),
                              onPressed: isChecked
                                  ? () {
                                      _clearChat();
                                      Navigator.of(context).pop();
                                    }
                                  : null,
                            ),
                          ],
                        );
                      },
                    );
                  },
                );
              }
            },
          ),
        ],
        title: Row(
          children: [
            GestureDetector(
              onTap: widget.profilePicture != ""
                  ? () {
                      showLargeImage(widget.profilePicture);
                    }
                  : null,
              child: CircleAvatar(
                backgroundColor: Colors.grey,
                backgroundImage: widget.profilePicture != ""
                    ? NetworkImage(widget.profilePicture)
                    : null,
                child: widget.profilePicture == ""
                    ? Icon(Icons.person, color: Colors.white)
                    : null,
              ),
            ),
            SizedBox(width: 8),
            Text(
              widget.nama,
              style: TextStyle(
                color: Colors.white,
                fontSize: 22,
              ),
            ),
          ],
        ),
      ),
      body: Container(
        decoration: BoxDecoration(
          color: Colors.blue[50],
        ),
        child: Column(
          children: [
            Expanded(
              child: StreamBuilder(
                stream: referenceDatabase
                    .child(widget.roomId)
                    .orderByChild('timestamp')
                    .onValue,
                builder: (context, snapshot) {
                  if (snapshot.hasData &&
                      snapshot.data!.snapshot.value != null) {
                    Map<dynamic, dynamic>? map =
                        (snapshot.data!.snapshot.value as Map?);
                    List<dynamic> messages = [];
                    if (map != null) {
                      map.forEach((key, value) {
                        messages.add({"id": key, ...value});
                      });
                    }
                    messages.sort(
                        (a, b) => b['timestamp'].compareTo(a['timestamp']));
                    return ListView.builder(
                      reverse: true,
                      itemCount: messages.length,
                      itemBuilder: (context, index) {
                        var message = messages[index];
                        bool isSentByCurrentUser = (message['sender'] ==
                            FirebaseAuth.instance.currentUser!.uid);
                        String messageId = message['id'];

                        // Decrypt message jika belum
                        if (message['text'] != null) {
                          _decryptMessage(widget.roomId, messageId,
                              message['text'], message['timestamp']);
                        }
                        return Column(
                          crossAxisAlignment: isSentByCurrentUser
                              ? CrossAxisAlignment.end
                              : CrossAxisAlignment.start,
                          children: [
                            SizedBox(
                              height: 5,
                            ),
                            if (message['text'] != null)
                              Container(
                                margin: EdgeInsets.symmetric(
                                    vertical: 5, horizontal: 10),
                                padding: EdgeInsets.all(10),
                                decoration: BoxDecoration(
                                  color: isSentByCurrentUser
                                      ? Colors.blue
                                      : Colors.grey,
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      decryptedMessages[messageId] ??
                                          'Memuat pesan baru...',
                                      style: TextStyle(color: Colors.white),
                                    ),
                                    SizedBox(height: 5),
                                    Text(
                                      _formatTimestamp(message['timestamp']),
                                      style: TextStyle(
                                        color: Colors.white,
                                        fontSize: 8,
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            if (message['imageUrl'] != null)
                              LayoutBuilder(
                                builder: (context, constraints) {
                                  return Container(
                                    margin: EdgeInsets.symmetric(
                                        vertical: 5, horizontal: 10),
                                    padding: EdgeInsets.all(10),
                                    decoration: BoxDecoration(
                                      color: isSentByCurrentUser
                                          ? Colors.blue
                                          : Colors.grey,
                                      borderRadius: BorderRadius.circular(15),
                                    ),
                                    child: Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: [
                                        Stack(
                                          children: [
                                            ClipRRect(
                                              borderRadius:
                                                  BorderRadius.circular(15),
                                              child: Image.network(
                                                message['imageUrl'],
                                                fit: BoxFit.cover,
                                                width:
                                                    constraints.maxWidth * 0.7,
                                                height:
                                                    constraints.maxWidth * 0.7,
                                                color: isSentByCurrentUser
                                                    ? null
                                                    : Color.fromRGBO(
                                                        255, 255, 255, 0.5),
                                                colorBlendMode:
                                                    isSentByCurrentUser
                                                        ? BlendMode.dstATop
                                                        : BlendMode.srcOver,
                                              ),
                                            ),
                                            if (!isSentByCurrentUser)
                                              Positioned(
                                                top: 5,
                                                right: 5,
                                                child: GestureDetector(
                                                  onTap: () {},
                                                  child: Container(
                                                    width: 35,
                                                    height: 35,
                                                    decoration: BoxDecoration(
                                                      shape: BoxShape.circle,
                                                      color: Colors.transparent,
                                                      border: Border.all(
                                                        color: Colors.white,
                                                        width: 2,
                                                      ),
                                                    ),
                                                    child: Center(
                                                      child: Icon(
                                                        Icons.download,
                                                        color: Colors.white,
                                                      ),
                                                    ),
                                                  ),
                                                ),
                                              ),
                                          ],
                                        ),
                                        SizedBox(height: 5),
                                        Text(
                                          _formatTimestamp(
                                              message['timestamp']),
                                          style: TextStyle(
                                            color: Colors.white,
                                            fontSize: 8,
                                          ),
                                        ),
                                      ],
                                    ),
                                  );
                                },
                              ),
                            if (message['fileUrl'] != null)
                              Container(
                                margin: EdgeInsets.symmetric(
                                    vertical: 5, horizontal: 10),
                                padding: EdgeInsets.all(10),
                                constraints: BoxConstraints(
                                  maxWidth:
                                      MediaQuery.of(context).size.width * 0.7,
                                ),
                                decoration: BoxDecoration(
                                  color: isSentByCurrentUser
                                      ? Colors.blue
                                      : Colors.grey,
                                  borderRadius: BorderRadius.circular(15),
                                ),
                                child: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Row(
                                      children: [
                                        Icon(
                                          _getFileTypeIcon(message['fileName']),
                                          size: 40,
                                          color: Colors.white,
                                        ),
                                        SizedBox(width: 10),
                                        Expanded(
                                          child: Column(
                                            crossAxisAlignment:
                                                CrossAxisAlignment.start,
                                            children: [
                                              Text(
                                                '${message['fileName']}',
                                                style: TextStyle(
                                                  color: Colors.white,
                                                  fontSize: 12,
                                                ),
                                                overflow: TextOverflow.ellipsis,
                                              ),
                                              SizedBox(height: 5),
                                              Text(
                                                'Ukuran: ${_formatFileSize(message['fileSize'])}',
                                                style: TextStyle(
                                                  color: Colors.white,
                                                  fontSize: 10,
                                                ),
                                              ),
                                            ],
                                          ),
                                        ),
                                        if (!isSentByCurrentUser)
                                          GestureDetector(
                                            onTap: () async {
                                              String fileName =
                                                  message['fileName'];
                                              if (!(await _isFileDownloaded(
                                                  fileName))) {
                                                setState(() {
                                                  _downloadingFiles[fileName] =
                                                      true;
                                                });
                                                await _downloadFile(
                                                    message['fileUrl'],
                                                    fileName);
                                              } else {
                                                ScaffoldMessenger.of(context)
                                                    .showSnackBar(
                                                  SnackBar(
                                                      content: Text(
                                                          'File already downloaded.')),
                                                );
                                              }
                                            },
                                            child: _buildDownloadIcon(
                                                message['fileName']),
                                          )
                                      ],
                                    ),
                                    SizedBox(height: 5),
                                    Text(
                                      _formatTimestamp(message['timestamp']),
                                      style: TextStyle(
                                        color: Colors.white,
                                        fontSize: 8,
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                          ],
                        );
                      },
                    );
                  } else {
                    return Center(
                      child: Text('Belum ada pesan'),
                    );
                  }
                },
              ),
            ),
            Align(
              alignment: Alignment.bottomCenter,
              child: Padding(
                padding: const EdgeInsets.all(0),
                child: Container(
                  color: Colors.white,
                  child: Padding(
                    padding:
                        const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
                    child: Row(
                      children: [
                        Expanded(
                          child: Container(
                            color: Colors.white,
                            height: 50,
                            width: MediaQuery.of(context).size.width * 0.70,
                            padding: EdgeInsets.symmetric(horizontal: 8.0),
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Expanded(
                                  // height: 35,
                                  // width: MediaQuery.of(context).size.width * 0.5,
                                  child: SingleChildScrollView(
                                    child: TextField(
                                      controller: messageController,
                                      maxLines: null,
                                      decoration: InputDecoration(
                                          hintText: "Ketik Pesan",
                                          hintStyle:
                                              TextStyle(color: Colors.grey),
                                          border: InputBorder.none),
                                    ),
                                  ),
                                ),
                                SizedBox(
                                  width: 10,
                                ),
                              ],
                            ),
                          ),
                        ),
                        Row(
                          children: [
                            PopupMenuButton(
                              icon: Image.asset('assets/icons/clip.png'),
                              onSelected: (value) async {
                                if (value == 'image') {
                                  final imagePicker = ImagePicker();
                                  final pickedFile = await imagePicker
                                      .pickImage(source: ImageSource.gallery);

                                  if (pickedFile != null) {
                                    final imageFile = File(pickedFile.path);
                                    final imageRef = FirebaseStorage.instance
                                        .ref()
                                        .child('images')
                                        .child(widget.roomId)
                                        .child(
                                            '${DateTime.now().millisecondsSinceEpoch}.jpg');
                                    await imageRef.putFile(imageFile);
                                    final imageUrl =
                                        await imageRef.getDownloadURL();

                                    _sendMessage('', imageUrl: imageUrl);
                                  }
                                }
                                if (value == 'file') {
                                  final result = await FilePicker.platform
                                      .pickFiles(allowMultiple: false);

                                  if (result != null) {
                                    final filePath = result.files.single.path!;
                                    final file = File(filePath);
                                    if (await file.exists()) {
                                      final fileName = result.files.single.name;
                                      final fileRef = FirebaseStorage.instance
                                          .ref()
                                          .child('files')
                                          .child(widget.roomId)
                                          .child(
                                              '${DateTime.now().millisecondsSinceEpoch}_$fileName');

                                      await fileRef.putFile(file);
                                      final fileUrl =
                                          await fileRef.getDownloadURL();
                                      final fileFileSize = await file.length();
                                      _sendMessage('',
                                          fileUrl: fileUrl,
                                          fileName: fileName,
                                          fileSize: fileFileSize);
                                    } else {
                                      print('File tidak ditemukan.');
                                    }
                                  }
                                }
                              },
                              offset: Offset(0, 300),
                              itemBuilder: (BuildContext bc) {
                                return [
                                  PopupMenuItem(
                                    value: 'image',
                                    child: Row(
                                      children: [
                                        Icon(
                                          Icons.image,
                                          color: Colors.blue,
                                        ),
                                        SizedBox(width: 10),
                                        Text('Pilih Gambar'),
                                      ],
                                    ),
                                  ),
                                  PopupMenuItem(
                                    value: 'file',
                                    child: Row(
                                      children: [
                                        Icon(
                                          Icons.file_copy_outlined,
                                          color: Colors.blue,
                                        ),
                                        SizedBox(width: 10),
                                        Text('Pilih File'),
                                      ],
                                    ),
                                  ),
                                ];
                              },
                            ),
                            // SizedBox(
                            //   width: MediaQuery.of(context).size.width * 0.03,
                            // ),
                            Container(
                              height: 35,
                              width: 35,
                              decoration: BoxDecoration(
                                  shape: BoxShape.circle, color: Colors.blue),
                              child: Center(
                                child: IconButton(
                                  icon: Icon(
                                    Icons.send,
                                    color: Colors.white,
                                  ),
                                  iconSize: 20,
                                  onPressed: () {
                                    if (messageController.text.isNotEmpty) {
                                      _sendMessage(messageController.text);
                                      messageController.clear();
                                    }
                                  },
                                ),
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _sendMessage(String text,
      {String? imageUrl,
      String? fileUrl,
      String? fileName,
      int? fileSize}) async {
    if (text.isNotEmpty || imageUrl != null || fileUrl != null) {
      Map<String, dynamic> messageData = {
        'sender': FirebaseAuth.instance.currentUser!.uid,
        'timestamp': DateTime.now().millisecondsSinceEpoch,
      };

      if (text.isNotEmpty) {
        print("===== current UID ========");
        print(widget.targetUserID);
        print("============================");

        String? public_key;

        final DatabaseReference refToUsers =
            FirebaseDatabase.instance.ref().child('users');

        await refToUsers
            .child(widget.targetUserID)
            .once()
            .then((DatabaseEvent event) {
          print(event.snapshot.value);

          if (event.snapshot.value != null) {
            Map<dynamic, dynamic>? pubkey =
                event.snapshot.value as Map<dynamic, dynamic>?;

            pubkey?.forEach((key, value) {
              if (key == "public_key") {
                print("=====tampildata pubkey=====");
                public_key = value;
                print(value);
              }
            });
          }
        });
        String messageId = referenceDatabase.child(widget.roomId).push().key!;
        decryptedMessages[messageId] = text;

        String encrypted = await RSA.encryptPKCS1v15(text, public_key!);
        messageData['text'] = encrypted;

        setState(() {
          decryptedMessages[messageId] = text;
        });
      }

      if (imageUrl != null) {
        messageData['imageUrl'] = imageUrl;
      }

      if (fileUrl != null) {
        messageData['fileUrl'] = fileUrl;
        messageData['fileName'] = fileName;
        messageData['fileSize'] = fileSize;
      }

      referenceDatabase.child(widget.roomId).push().set(messageData);
    }
  }

  void _clearChat() async {
    await referenceDatabase.child(widget.roomId).remove();
    setState(() {
      decryptedMessages.clear();
    });
  }

  String _formatTimestamp(int timestamp) {
    var date = DateTime.fromMillisecondsSinceEpoch(timestamp);
    String formattedDate = "${date.day}/${date.month}/${date.year}";
    String formattedTime =
        "${date.hour.toString().padLeft(2, '0')}:${date.minute.toString().padLeft(2, '0')}";
    return "$formattedDate $formattedTime";
  }

  String _formatFileSize(int fileSize) {
    if (fileSize < 1024) {
      return '$fileSize B';
    } else if (fileSize < 1024 * 1024) {
      return '${(fileSize / 1024).toStringAsFixed(2)} KB';
    } else {
      return '${(fileSize / (1024 * 1024)).toStringAsFixed(2)} MB';
    }
  }

  Future<void> _downloadFile(String fileUrl, String fileName) async {
    try {
      var status = await Permission.storage.request();
      if (status.isGranted) {
        final externalDir = await getExternalStorageDirectory();
        final savedDir = Directory('${externalDir!.path}/DisApp/Documents');
        if (!await savedDir.exists()) {
          await savedDir.create(recursive: true);
        }

        await FlutterDownloader.enqueue(
          url: fileUrl,
          savedDir: savedDir.path,
          fileName: fileName,
          showNotification: true,
          openFileFromNotification: true,
        );

        await FlutterDownloader.registerCallback((id, status, progress) {
          print('Download status for task $id: $status, progress: $progress%');
          if (status == DownloadTaskStatus.complete) {
            setState(() {
              _downloadingFiles[fileName] = false;
            });
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('Download complete.')),
            );
          } else if (status == DownloadTaskStatus.failed) {
            setState(() {
              _downloadingFiles[fileName] = false;
            });
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('Download failed, please try again.')),
            );
          } else if (status == DownloadTaskStatus.running) {
            setState(() {
              _downloadingFiles[fileName] = true;
            });
          }
        });
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Storage permission denied.')),
        );
      }
    } catch (e) {
      print('Error downloading file: $e');
      setState(() {
        _downloadingFiles[fileName] = false;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('An error occurred: $e')),
      );
    }
  }

  Widget _buildDownloadIcon(String fileName) {
    return Container(
      width: 35,
      height: 35,
      decoration: BoxDecoration(
        shape: BoxShape.circle,
        color: Colors.transparent,
        border: Border.all(color: Colors.white, width: 2),
      ),
      child: Center(
        child: _downloadingFiles[fileName] == true
            ? CircularProgressIndicator(
                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
              )
            : FutureBuilder<bool>(
                future: _isFileDownloaded(fileName),
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return SizedBox
                        .shrink(); // Optionally show a placeholder while waiting
                  } else if (snapshot.hasData && snapshot.data!) {
                    return Icon(Icons.done, color: Colors.white);
                  } else {
                    return Icon(Icons.download, color: Colors.white);
                  }
                },
              ),
      ),
    );
  }

  Future<bool> _isFileDownloaded(String fileName) async {
    final externalDir = await getExternalStorageDirectory();
    final file = File('${externalDir!.path}/DisApp/Documents/$fileName');
    return await file.exists();
  }
}
